#
# ~/.bash_environment
# shellcheck shell=bash
#

# ----------------------------------------------------------------------
#  LOCALES
# ----------------------------------------------------------------------

# enable en_US locale w/ UTF-8 encodings
LANG="en_US.UTF-8"
LANGUAGE="en"
LC_CTYPE="en_US.UTF-8"
LC_ALL="en_US.UTF-8"

export LANG LANGUAGE LC_CTYPE LC_ALL

# ----------------------------------------------------------------------
# PATH
# ----------------------------------------------------------------------

# we want the various sbins on the path along with /usr/local/bin
export PATH="$PATH:/usr/local/sbin:/usr/sbin:/sbin"
export PATH="/usr/local/bin:$PATH"

# put gettext tools on the path
[ -d "/usr/lib/gettext/" ] && export PATH="$PATH:/usr/lib/gettext"

# put ~/.local/bin & ~/bin on PATH if it exists
[ -d "$HOME/.local/bin" ]  && export PATH="$PATH:$HOME/.local/bin"
[ -d "$HOME/bin" ]         && export PATH="$PATH:$HOME/bin"


# ----------------------------------------------------------------------
#  SYSTEM INFO
# ----------------------------------------------------------------------

# Basic variables
: "${HOME=~}"
: "${LOGNAME=$(id -un)}"
: "${UNAME=$(uname)}"

# complete hostnames from this file
: "${HOSTFILE=~/.ssh/known_hosts}"

# readline config
: "${INPUTRC=~/.inputrc}"

# Get rid of mail notification
unset MAILCHECK

if [[ "$HOSTNAME" =~ \. ]]; then
    FQDN=$HOSTNAME
else
    FQDN=$(hostname -f)
fi

if [[ "$FQDN" =~ \. ]]; then
    # shellcheck disable=SC2034
    DOMAIN=$(echo "$FQDN" | cut -d '.' -f 2)
fi

# ----------------------------------------------------------------------
#  SHELL TYPE
# ----------------------------------------------------------------------

# detect interactive shell
case "$-" in
    *i*) INTERACTIVE=yes ;;
    *)   unset INTERACTIVE ;;
esac

# detect login shell
# shellcheck disable=SC2034
case "$0" in
    -*) LOGIN=yes ;;
    *)  unset LOGIN ;;
esac

test -n "$BASH_VERSION" && SHELLNAME=bash
test -n "$ZSH_VERSION"  && SHELLNAME=zsh

# ----------------------------------------------------------------------
# EDITOR & PAGER
# ----------------------------------------------------------------------

# shellcheck disable=SC2209
if command -v nvim >/dev/null; then
    export EDITOR=nvim
elif command -v vim >/dev/null; then
    export EDITOR=vim
else
    export EDITOR=vi
fi

# Default pager ('less' is so much better than 'more'...)
if [ -n "$(command -v less)" ]; then
    export LESS="-FiRMSwX"
    export PAGER="less $LESS"
    export MANPAGER="$PAGER"
else
    export PAGER=more
fi

# Colored man pages, usually not supported on old servers distros
if test -n "$XDG_CURRENT_DESKTOP" ; then
    export MANPAGER="$PAGER --use-color -Dd+r -Du+b"
    export MANROFFOPT="-P -c"
fi

# ----------------------------------------------------------------------
# MISC
# ----------------------------------------------------------------------

# GPG config
export GNUPGHOME=~/.gnupg

# SSH config

unset SSH_ASKPASS
unset SSH_AGENT_PID
if [ -z "$XDG_RUNTIME_DIR" ] && [ -d "/run/user/$UID/" ]; then
    export XDG_RUNTIME_DIR="/run/user/$UID/"
fi
if [ -z "$SSH_AUTH_SOCK" ] ; then
    export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
fi

# Tsocks config
export TSOCKS_CONF_FILE=~/.dotfiles/tsocks/tsocks.conf

# BC configuration for interactive usage
test -n "$INTERACTIVE" && export BC_ENV_ARGS=~/.dotfiles/bc/bcrc

# Easybuild
export EASYBUILDBUILDPATH=/tmp/
export EASYBUILD_PREFIX=$HOME/.local/easybuild
export EASYBUILD_MODULES_TOOL=Lmod
export EASYBUILD_MODULE_NAMING_SCHEME=CategorizedModuleNamingScheme

export LOCAL_MODULES="${EASYBUILD_PREFIX}/modules/all"

alias ma="module avail"
alias ml="module list"
function mu() {
    module use "$LOCAL_MODULES"
    module load tools/EasyBuild
}

# ----------------------------------------------------------------------
#  GRID5000 specific
# ----------------------------------------------------------------------

if [[ "$FQDN" =~ \.grid5000\.fr ]]; then
    export OAR_JOB_KEY_FILE=~/.ssh/id_rsa
    # export http_proxy=http://proxy:3128
    # export https_proxy=$http_proxy
fi

# Grid5000 Puppet admin tools
if [ -d ~/.gpuppet ]; then
    export GPUPPET_PREFIX=~/.gpuppet
    export GPUPPET_PLATFORM=production
    export GPUPPET_LOCATION=luxembourg
    export GPUPPET_USER=hcartiaux
    export GPUPPET_SSH_CONFIG=$GPUPPET_PREFIX/ssh/config
    alias cdgp='cd $GPUPPET_PREFIX/repo && source setup_env.sh && echo "==> Grid5000 Puppet 4 repository"'
fi

# -------------------------------------------------------------------
# Ruby & RVM
# -------------------------------------------------------------------

[ -d "/usr/lib/ruby/gems" ]   && GEM_SYSTEM_BIN_PATH="$(echo /usr/lib/ruby/gems/*)/bin"
[ -d "$HOME/.rvm/bin" ]       && GEM_USER_BIN_PATH="$HOME/.rvm/bin"
[ -n "$GEM_SYSTEM_BIN_PATH" ] && export PATH="$PATH:$GEM_SYSTEM_BIN_PATH"
[ -n "$GEM_USER_BIN_PATH" ]   && export PATH="$PATH:$GEM_USER_BIN_PATH"

# RVM specific (see http://beginrescueend.com/)
if [ -s "$HOME/.rvm/scripts/rvm" ]; then
  # shellcheck disable=SC1091
  . "$HOME/.rvm/scripts/rvm"
fi


if [ "$(which ruby 2>/dev/null | grep -c "$HOME/.rvm")" != 0 ]; then
    # Get off my lawn
    rvm reset
fi

# -------------------------------------------------------------------
# Scaleway CLI autocomplete initialization.
# -------------------------------------------------------------------
if [ -n "$SHELLNAME" ] && command -v scw >/dev/null 2>&1; then
    eval "$(scw autocomplete script "shell=$SHELLNAME")"
fi

if [ -n "$SHELLNAME" ] && command -v fzf >/dev/null 2>&1; then
    eval "$(fzf "--$SHELLNAME")"
fi
